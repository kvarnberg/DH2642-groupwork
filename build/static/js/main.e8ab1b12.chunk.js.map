{"version":3,"sources":["config/Fire.js","components/nav/Nav.js","components/home/Home.js","components/random/Random.js","components/search/Search.js","components/about/About.js","components/login/Login.js","components/jokes/Jokes.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","Nav","style","color","textDecoration","to","onClick","signOut","Home","React","Component","FetchRandom","props","addToUser","user","localStorage","collection","doc","add","content","state","joke","apiId","id","then","alert","catch","error","message","loading","fetch","headers","accept","response","json","data","this","setState","className","refreshPage","window","location","reload","Random","Search","useState","jokes","setJokes","query","setQuery","FocusOnSearch","useRef","useEffect","current","focus","getJokes","a","url","results","loadJokes","jokeComponents","map","AllResultsFromTheApi","ListGroup","Item","onAdd","mystyle","backgroundColor","padding","fontFamily","Form","Control","placeholder","ref","onChange","e","target","value","About","Login","email","handleChange","type","name","password","login","signup","JokeInput","alt","src","delete","Jokes","newJokeContent","setNewJokeContent","onSnapshot","snapshot","jokesData","forEach","push","myStyle","flexDirection","key","App","preventDefault","signInWithEmailAndPassword","u","console","log","uid","createUserWithEmailAndPassword","set","authListener","onAuthStateChanged","setItem","removeItem","path","exact","component","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8ab1b12.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBbB_i5vRtTL69ByXLdHcJoen8vCLCvFQY\",\n  authDomain: \"project-joke-6bbc1.firebaseapp.com\",\n  databaseURL: \"https://project-joke-6bbc1.firebaseio.com\",\n  projectId: \"project-joke-6bbc1\",\n  storageBucket: \"project-joke-6bbc1.appspot.com\",\n  messagingSenderId: \"816301947427\",\n  appId: \"1:816301947427:web:e0e5ff1c6ed3bc189b4f96\",\n  measurementId: \"G-EH1FH88W1E\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase.firestore();\nexport const auth = firebase.auth();\n","import React from \"react\";\nimport \"./Nav.css\";\nimport { Link } from \"react-router-dom\";\nimport { auth } from \"../../config/Fire\";\n\nfunction Nav() {\n  const navStyle = {\n    color: \"black\",\n    textDecoration: \"none\"\n  };\n\n  function logout() {\n    auth.signOut();\n  }\n\n  return (\n    <nav>\n      <Link style={navStyle} to=\"/\">\n        <h3>logo</h3>\n      </Link>\n      <ul>\n        <li>\n          <Link to=\"/\">home</Link>\n        </li>\n        <li>\n          <Link to=\"/random\">random</Link>\n        </li>\n        <li>\n          <Link to=\"/search\">search</Link>\n        </li>\n        <li>\n          <Link to=\"/jokes\">jokes</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">about</Link>\n        </li>\n        <li>\n          <Link onClick={logout}>logout</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"../../App.css\";\nimport Nav from \"../nav/Nav\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div>\n        <Nav />\n        <h1>Home page</h1>\n        <h3>You are now logged in</h3>\n        <div>Other users jokes:</div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"../../App.css\";\nimport Nav from \"../nav/Nav\";\nimport { db } from \"../../config/Fire\";\n\nfunction Random() {\n  return (\n    <div className=\"Random\">\n      <Nav />\n      <header className=\"App-header\">\n        <FetchRandom />\n      </header>\n    </div>\n  );\n}\n\nclass FetchRandom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      joke: \"\",\n      id: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    const url = \"https://icanhazdadjoke.com/\";\n    const response = await fetch(url, {\n      headers: { accept: \"application/json\" }\n    });\n    const data = await response.json();\n    this.setState({\n      loading: false,\n      joke: data.joke,\n      id: data.id\n    });\n  }\n\n  addToUser = () => {\n    const user = localStorage.user;\n    db.collection(\"users\")\n      .doc(user)\n      .collection(\"savedjokes\")\n      .add({ content: this.state.joke, apiId: this.state.id })\n      .then(() => {\n        alert(\"Joke has been added\");\n      })\n      .catch(error => {\n        alert(error.message);\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.loading ? (\n          <div>loading...</div>\n        ) : (\n          <div>\n            <div>{this.state.joke}</div>\n          </div>\n        )}\n        <button className=\"smolbtn\" onClick={refreshPage}>\n          Get another random joke\n        </button>\n        <br></br>\n        <button className=\"smolbtn\" onClick={this.addToUser}>\n          Save this joke\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction refreshPage() {\n  window.location.reload();\n}\n\nexport default Random;\n","//IMPORT\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Form, ListGroup } from \"react-bootstrap\";\nimport Nav from \"../nav/Nav\";\nimport { db } from \"../../config/Fire\";\n\n//EXPORT\nexport default function Search() {\n  //STATE\n  const [jokes, setJokes] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const user = localStorage.user;\n\n  //REF STORES A REFERENCE TO A DOM NODE\n  const FocusOnSearch = useRef(null);\n  //ACCESS TO A CHILD'D DOM NODE FROM A PARENT COMPONENT\n  useEffect(() => {\n    FocusOnSearch.current.focus();\n  }, []);\n\n  //GETTING THE API\n  const getJokes = async query => {\n    var url = `https://icanhazdadjoke.com/search?term=${query}`;\n    const results = await fetch(url, {\n      headers: { accept: \"application/json\" }\n    });\n    const jokes = await results.json();\n    return jokes.results;\n  };\n\n  //EFFECT PERFORMS SIDE EFFECTS IN FUNCTION COMPONENTS\n  useEffect(() => {\n    let currentQuery = true;\n\n    //---\n    const loadJokes = async () => {\n      //IF QUERY != NONE RETURN THE EXISTING JOKES WITH THAT WORD\n      if (!query) return setJokes([]);\n      //ALWAYS FIND A JOKE WITH THE WORD THAT THE USER HAS ENTERED\n      if (currentQuery) {\n        const jokes = await getJokes(query);\n        setJokes(jokes);\n      }\n    };\n    //---\n\n    //RUN ABOVE\n    loadJokes();\n\n    //ENTER AN INPUT FOR THE QUERY\n  }, [query]);\n\n  //SHOW LIST OF JOKES(EVERY JOKE IN A BOX) WHEN ENTERING A WORD\n  let jokeComponents = jokes.map(AllResultsFromTheApi => {\n    return (\n      <ListGroup.Item>\n        {AllResultsFromTheApi.joke}\n        <button onClick={() => onAdd(AllResultsFromTheApi)}>Save</button>\n      </ListGroup.Item>\n    );\n  });\n\n  const onAdd = joke => {\n    db.collection(\"users\")\n      .doc(user)\n      .collection(\"savedjokes\")\n      .add({ content: joke.joke, apiId: joke.id })\n      .then(() => {\n        alert(\"Joke has been added\");\n      })\n      .catch(error => {\n        alert(error.message);\n      });\n  };\n\n  //STYLING THE RESULT\n  const mystyle = {\n    color: \"black\",\n    backgroundColor: \"white\",\n    padding: \"10px\",\n    fontFamily: \"Times\"\n  };\n\n  //SHOW THE RESULT\n  return (\n    <div>\n      <Nav />\n      <h4 style={mystyle}>Search For A Joke</h4>\n      <Form.Control\n        style={mystyle}\n        placeholder=\"Search for a Joke...\"\n        ref={FocusOnSearch}\n        onChange={e => setQuery(e.target.value)}\n        value={query}\n      />\n      <div style={mystyle}>{jokeComponents}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../../App.css\";\nimport Nav from \"../nav/Nav\";\n\nfunction About() {\n  return (\n    <div>\n      <Nav />\n      <div className=\"App\">about</div>\n    </div>\n  );\n}\n\nexport default About;\n","import React from \"react\";\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div>\n        <form id=\"signForm\">\n          <input\n            value={this.props.email}\n            onChange={this.props.handleChange}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"enter email\"\n          ></input>\n          <br></br>\n          <input\n            value={this.props.password}\n            onChange={this.props.handleChange}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"enter password\"\n          ></input>\n          <br></br>\n          <button type=\"submit\" onClick={this.props.login}>\n            Login\n          </button>\n          <br></br>\n          <button onClick={this.props.signup}>Signup</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport Nav from \"../nav/Nav\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { db } from \"../../config/Fire\";\nimport \"./User.css\";\n\nconst JokeInput = ({ joke }) => {\n  const content = joke.content;\n  const user = localStorage.user;\n\n  const onDelete = () => {\n    db.collection(\"users\")\n      .doc(user)\n      .collection(\"savedjokes\")\n      .doc(joke.id)\n      .delete()\n      .then(() => {\n        alert(\"Joke has been deleted\");\n      })\n      .catch(error => {\n        alert(error.message);\n      });\n  };\n\n  return (\n    <ListGroup.Item>\n      {content}\n      <img\n        alt=\"delete button\"\n        src=\"https://img.icons8.com/carbon-copy/30/000000/filled-trash.png\"\n        onClick={onDelete}\n      />\n    </ListGroup.Item>\n  );\n};\n\nfunction Jokes() {\n  const [jokes, setJokes] = React.useState([]);\n  const [newJokeContent, setNewJokeContent] = React.useState(\"\");\n  const user = localStorage.user;\n\n  React.useEffect(() => {\n    return db\n      .collection(\"users\")\n      .doc(user)\n      .collection(\"savedjokes\")\n      .onSnapshot(snapshot => {\n        const jokesData = [];\n        snapshot.forEach(doc => jokesData.push({ ...doc.data(), id: doc.id }));\n        setJokes(jokesData);\n      });\n  }, [user]);\n\n  const onCreate = () => {\n    db.collection(\"users\")\n      .doc(user)\n      .collection(\"savedjokes\")\n      .add({ content: newJokeContent })\n      .then(() => {\n        alert(\"Joke has been added\");\n        window.location = \"/\";\n      })\n      .catch(error => {\n        alert(error.message);\n      });\n  };\n\n  const myStyle = {\n    flexDirection: \"column\"\n  };\n\n  return (\n    <div>\n      <Nav />\n      <input\n        value={newJokeContent}\n        onChange={e => setNewJokeContent(e.target.value)}\n      />\n      <button onClick={onCreate}>Add</button>\n      <ul>\n        {jokes.map(joke => (\n          <li style={myStyle} key={joke.id}>\n            <JokeInput joke={joke} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Jokes;\n\n// merge this code\n\n/* import React from \"react\";\nimport \"./User.css\";\nimport trashIcon from \"./bin.png\"\n\nclass User extends React.Component {\n  constructor() {\n    super();\n    // get data from firebase\n    this.state = {\n      rows: ['row 1', 'row 2', 'row 3'],\n    };\n  }\n\n  deleteRow = (index) => {\n    // make new rows. note: react state is immutable.\n    const newRows = this.state.rows.slice(0, index).concat(this.state.rows.slice(index + 1));\n    this.setState({\n      rows: newRows,\n    });\n  };\n\n  render() {\n    const rows = this.state.rows.map((row, index) => (\n      <tr key={row}>\n        <td class=\"row\">{row}</td>\n        <td><img style={{height:\"18px\"}}src={trashIcon} onClick={() => { this.deleteRow(index);}}/></td>\n      </tr>\n    ));\n    return (\n      <div>\n        <div class=\"user\">\n          <h2>username's saved jokes</h2>\n        </div>\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}*/\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/home/Home\";\nimport Random from \"./components/random/Random\";\nimport Search from \"./components/search/Search\";\nimport About from \"./components/about/About\";\nimport Login from \"./components/login/Login\";\nimport Jokes from \"./components/jokes/Jokes\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { db, auth } from \"./config/Fire\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener() {\n    auth.onAuthStateChanged(user => {\n      // console.log(user);\n      if (user) {\n        this.setState({ user });\n        localStorage.setItem(\"user\", user.uid);\n      } else {\n        this.setState({ user: null });\n        localStorage.removeItem(\"user\");\n        console.log(\"not logged in\");\n      }\n    });\n  }\n\n  login = e => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(this.state.email, this.state.password)\n      .then(u => {\n        console.log(u.user.uid);\n      })\n      .catch(error => {\n        alert(error);\n      });\n  };\n\n  signup = e => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(this.state.email, this.state.password)\n      .then(u => {\n        db.collection(\"users\")\n          .doc(u.user.uid)\n          .set({ user: u.user.email, name: u.user.email });\n      })\n      .catch(error => {\n        alert(error);\n      });\n  };\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.user ? (\n          <Router>\n            <Switch>\n              <Route\n                path=\"/\"\n                render={props => (\n                  <Login\n                    {...props}\n                    email={this.state.email}\n                    password={this.state.password}\n                    signup={this.signup}\n                    login={this.login}\n                    handleChange={this.handleChange}\n                  />\n                )}\n              ></Route>\n            </Switch>\n          </Router>\n        ) : (\n          <Router>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/random\" component={Random} />\n              <Route path=\"/search\" component={Search} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/jokes\" component={Jokes} />\n              <Route\n                path=\"*\"\n                component={() => \"404 NOT FOUND IN THIS APP-UNIVERSE\"}\n              />\n            </Switch>\n          </Router>\n        )}\n      </div>\n    );\n  }\n}\n\n/*make a home component in different file*/\n\n/* <Router>\n        <div className=\"App\">\n          <Nav />\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/random\" component={Random} />\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/register\" component={Register} />\n            <Route\n              path=\"*\"\n              component={() => \"404 NOT FOUND IN THIS APP-UNIVERSE\"}\n            />\n          </Switch>\n        </div>\n      </Router>*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}