{"ast":null,"code":"var _jsxFileName = \"/Users/josephinekvarnberg/Documents/GitHub/jkv-juliahua-jumanm-saranaz-week2/src/components/search/Search.js\";\n//IMPORT\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Form, ListGroup } from \"react-bootstrap\"; //EXPORT\n\nexport default function Search() {\n  //STATE\n  const [jokes, setJokes] = useState([]);\n  const [query, setQuery] = useState(\"\"); //REF STORES A REFERENCE TO A DOM NODE\n\n  const FocusOnSearch = useRef(null); //ACCESS TO A CHILD'D DOM NODE FROM A PARENT COMPONENT\n\n  useEffect(() => {\n    FocusOnSearch.current.focus();\n  }, []); //GETTING THE API\n\n  const getJokes = async query => {\n    var url = `https://icanhazdadjoke.com/search?term=${query}`;\n    const results = await fetch(url, {\n      headers: {\n        accept: \"application/json\"\n      }\n    });\n    const jokes = await results.json();\n    return jokes.results;\n  }; //EFFECT PERFORMS SIDE EFFECTS IN FUNCTION COMPONENTS\n\n\n  useEffect(() => {\n    let currentQuery = true; //---\n\n    const loadJokes = async () => {\n      //IF QUERY != NONE RETURN THE EXISTING JOKES WITH THAT WORD\n      if (!query) return setJokes([]); //ALWAYS FIND A JOKE WITH THE WORD THAT THE USER HAS ENTERED\n\n      if (currentQuery) {\n        const jokes = await getJokes(query);\n        setJokes(jokes);\n      }\n    }; //---\n    //RUN ABOVE\n\n\n    loadJokes(); //ENTER AN INPUT FOR THE QUERY\n  }, [query]); //SHOW LIST OF JOKES(EVERY JOKE IN A BOX) WHEN ENTERING A WORD\n\n  let jokeComponents = jokes.map(AllResultsFromTheApi => {\n    return React.createElement(ListGroup.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, AllResultsFromTheApi.joke);\n  }); //STYLING THE RESULT\n\n  const mystyle = {\n    color: \"black\",\n    backgroundColor: \"white\",\n    padding: \"10px\",\n    fontFamily: \"Times\"\n  }; //SHOW THE RESULT\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    style: mystyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Search For A Joke\"), React.createElement(Form.Control, {\n    style: mystyle,\n    placeholder: \"Search for a Joke...\",\n    ref: FocusOnSearch,\n    onChange: e => setQuery(e.target.value),\n    value: query,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: mystyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, jokeComponents));\n}","map":{"version":3,"sources":["/Users/josephinekvarnberg/Documents/GitHub/jkv-juliahua-jumanm-saranaz-week2/src/components/search/Search.js"],"names":["React","useState","useEffect","useRef","Form","ListGroup","Search","jokes","setJokes","query","setQuery","FocusOnSearch","current","focus","getJokes","url","results","fetch","headers","accept","json","currentQuery","loadJokes","jokeComponents","map","AllResultsFromTheApi","joke","mystyle","color","backgroundColor","padding","fontFamily","e","target","value"],"mappings":";AAAA;AACA,OAAO,sCAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,iBAAhC,C,CAEA;;AACA,eAAe,SAASC,MAAT,GAAkB;AAC/B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC,CAH+B,CAK/B;;AACA,QAAMU,aAAa,GAAGR,MAAM,CAAC,IAAD,CAA5B,CAN+B,CAO/B;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,aAAa,CAACC,OAAd,CAAsBC,KAAtB;AACD,GAFQ,EAEN,EAFM,CAAT,CAR+B,CAY/B;;AACA,QAAMC,QAAQ,GAAG,MAAML,KAAN,IAAe;AAC9B,QAAIM,GAAG,GAAI,0CAAyCN,KAAM,EAA1D;AACA,UAAMO,OAAO,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAC/BG,MAAAA,OAAO,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AADsB,KAAN,CAA3B;AAGA,UAAMZ,KAAK,GAAG,MAAMS,OAAO,CAACI,IAAR,EAApB;AACA,WAAOb,KAAK,CAACS,OAAb;AACD,GAPD,CAb+B,CAsB/B;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,YAAY,GAAG,IAAnB,CADc,CAGd;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5B;AACA,UAAI,CAACb,KAAL,EAAY,OAAOD,QAAQ,CAAC,EAAD,CAAf,CAFgB,CAG5B;;AACA,UAAIa,YAAJ,EAAkB;AAChB,cAAMd,KAAK,GAAG,MAAMO,QAAQ,CAACL,KAAD,CAA5B;AACAD,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,KARD,CAJc,CAad;AAEA;;;AACAe,IAAAA,SAAS,GAhBK,CAkBd;AACD,GAnBQ,EAmBN,CAACb,KAAD,CAnBM,CAAT,CAvB+B,CA4C/B;;AACA,MAAIc,cAAc,GAAGhB,KAAK,CAACiB,GAAN,CAAUC,oBAAoB,IAAI;AACrD,WAAO,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,oBAAoB,CAACC,IAAtC,CAAP;AACD,GAFoB,CAArB,CA7C+B,CAiD/B;;AACA,QAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE,OADO;AAEdC,IAAAA,eAAe,EAAE,OAFH;AAGdC,IAAAA,OAAO,EAAE,MAHK;AAIdC,IAAAA,UAAU,EAAE;AAJE,GAAhB,CAlD+B,CAyD/B;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAEJ,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,KAAK,EAAEA,OADT;AAEE,IAAA,WAAW,EAAC,sBAFd;AAGE,IAAA,GAAG,EAAEhB,aAHP;AAIE,IAAA,QAAQ,EAAEqB,CAAC,IAAItB,QAAQ,CAACsB,CAAC,CAACC,MAAF,CAASC,KAAV,CAJzB;AAKE,IAAA,KAAK,EAAEzB,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EASE;AAAK,IAAA,KAAK,EAAEkB,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBJ,cAAtB,CATF,CADF;AAaD","sourcesContent":["//IMPORT\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Form, ListGroup } from \"react-bootstrap\";\n\n//EXPORT\nexport default function Search() {\n  //STATE\n  const [jokes, setJokes] = useState([]);\n  const [query, setQuery] = useState(\"\");\n\n  //REF STORES A REFERENCE TO A DOM NODE\n  const FocusOnSearch = useRef(null);\n  //ACCESS TO A CHILD'D DOM NODE FROM A PARENT COMPONENT\n  useEffect(() => {\n    FocusOnSearch.current.focus();\n  }, []);\n\n  //GETTING THE API\n  const getJokes = async query => {\n    var url = `https://icanhazdadjoke.com/search?term=${query}`;\n    const results = await fetch(url, {\n      headers: { accept: \"application/json\" }\n    });\n    const jokes = await results.json();\n    return jokes.results;\n  };\n\n  //EFFECT PERFORMS SIDE EFFECTS IN FUNCTION COMPONENTS\n  useEffect(() => {\n    let currentQuery = true;\n\n    //---\n    const loadJokes = async () => {\n      //IF QUERY != NONE RETURN THE EXISTING JOKES WITH THAT WORD\n      if (!query) return setJokes([]);\n      //ALWAYS FIND A JOKE WITH THE WORD THAT THE USER HAS ENTERED\n      if (currentQuery) {\n        const jokes = await getJokes(query);\n        setJokes(jokes);\n      }\n    };\n    //---\n\n    //RUN ABOVE\n    loadJokes();\n\n    //ENTER AN INPUT FOR THE QUERY\n  }, [query]);\n\n  //SHOW LIST OF JOKES(EVERY JOKE IN A BOX) WHEN ENTERING A WORD\n  let jokeComponents = jokes.map(AllResultsFromTheApi => {\n    return <ListGroup.Item>{AllResultsFromTheApi.joke}</ListGroup.Item>;\n  });\n\n  //STYLING THE RESULT\n  const mystyle = {\n    color: \"black\",\n    backgroundColor: \"white\",\n    padding: \"10px\",\n    fontFamily: \"Times\"\n  };\n\n  //SHOW THE RESULT\n  return (\n    <div>\n      <h4 style={mystyle}>Search For A Joke</h4>\n      <Form.Control\n        style={mystyle}\n        placeholder=\"Search for a Joke...\"\n        ref={FocusOnSearch}\n        onChange={e => setQuery(e.target.value)}\n        value={query}\n      />\n      <div style={mystyle}>{jokeComponents}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}